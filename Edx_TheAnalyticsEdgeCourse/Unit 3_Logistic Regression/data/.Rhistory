devtools::install_github("rstudio/rmarkdown")
install.packages("devtools")
devtools::install_github("rstudio/rmarkdown")
help(ktable)
help(kable)
df3
df3 = readRDS("trigrams.rds")
df3
head(df3)
library(readxl); library(ggplot2); library(dplyr)
set.seed(1039)
#Reading data
data = as.data.frame(read_excel("Data.xlsx"))
dataInforme = data[1:13247,] #Previous report
tempEst = as.data.frame(read_excel("TempEst.xlsx"))
tempEst$TempCalculo = 1.1*tempEst$`Temp. Media`+0.1*rnorm(length(tempEst$`Temp. Media`),
mean = 1, sd = 1)
df1 = left_join(tempEst, dataInforme, by=c("Fecha"))
getwd()
sd(c(5,8,12))
which.min(c(4,1,6))
Sys.setlocale("LC_ALL", "C")
rm(df3)
getwd()
corrosionTempHR <- read_excel("G:/IETcc/2. Tesis/2. Resultados/SAG_Medidas corrosión.xlsx", sheet = 1, skip = 2)
library(readxl)
corrosionTempHR <- read_excel("G:/IETcc/2. Tesis/2. Resultados/SAG_Medidas corrosión.xlsx", sheet = 1, skip = 2)
View(corrosionTempHR)
colnames(corrosionTempHR) = c('fecha', 'tiempo', 'temp', 'HR', 'obs.')
corrosionViga5.1 <- read_excel("G:/IETcc/2. Tesis/2. Resultados/SAG_Medidas corrosión.xlsx", sheet = 2)#, skip = 2)
View(corrosionViga5.1)
corrosionViga5.1 = read_excel("G:/IETcc/2. Tesis/2. Resultados/SAG_Medidas corrosión.xlsx", sheet = 2, skip = 2)
corrosionViga5.1 = corrosionViga5.1[,c(2:15)]
corrosionViga5.1 = corrosionViga5.1[,c(2:18)]
corrosionViga5.1 = read_excel("G:/IETcc/2. Tesis/2. Resultados/SAG_Medidas corrosión.xlsx", sheet = 2, skip = 2)
corrosionViga5.1 = corrosionViga5.1[,c(2:18)]
corrosionViga5.1 = read_excel("G:/IETcc/2. Tesis/2. Resultados/SAG_Medidas corrosión.xlsx", sheet = 2, skip = 2)
corrosionViga5.1 = corrosionViga5.1[,c(2:19)]
#Viga 5.1
names = ('corrosionViga5.1',
'corrosionViga5.2')
names = ['corrosionViga5.1',
'corrosionViga5.2']
names = c('corrosionViga5.1',
'corrosionViga5.2')
names[1] = read_excel("G:/IETcc/2. Tesis/2. Resultados/SAG_Medidas corrosión.xlsx", sheet = 2, skip = 2)
names[1] = names[1][,c(2:19)]
temp = read_excel("G:/IETcc/2. Tesis/2. Resultados/SAG_Medidas corrosión.xlsx", sheet = 2, skip = 2)
names[1] = temp[,c(2:19)]
colnames(temp) = c('resist.A', 'Icor.A', 'Ecorr.A', 'rhom.A',
'resist.B', 'Icor.B', 'Ecorr.B', 'rhom.B',
'resist.C', 'Icor.C', 'Ecorr.C', 'rhom.C',
'resist', 'Icor', 'Ecorr', 'rhom')
View(temp)
temp = read_excel("G:/IETcc/2. Tesis/2. Resultados/SAG_Medidas corrosión.xlsx", sheet = 2, skip = 2)
temp = temp[,c(2:19)]
colnames(temp) = c('Fecha', 'tiempo',
'resist.A', 'Icor.A', 'Ecorr.A', 'rhom.A',
'resist.B', 'Icor.B', 'Ecorr.B', 'rhom.B',
'resist.C', 'Icor.C', 'Ecorr.C', 'rhom.C',
'resist', 'Icor', 'Ecorr', 'rhom')
names[1] = temp
rm(corrosionViga5.1)
rm(df3)
#Datos de medidas de corrosion en vigas
names = c('corrosionViga5.1',
'corrosionViga5.2')
temp = read_excel("G:/IETcc/2. Tesis/2. Resultados/SAG_Medidas corrosión.xlsx", sheet = 2, skip = 2)
temp = temp[,c(2:19)]
colnames(temp) = c('Fecha', 'tiempo',
'resist.A', 'Icor.A', 'Ecorr.A', 'rhom.A',
'resist.B', 'Icor.B', 'Ecorr.B', 'rhom.B',
'resist.C', 'Icor.C', 'Ecorr.C', 'rhom.C',
'resist', 'Icor', 'Ecorr', 'rhom')
names[1] = temp
View(temp)
names = c('5.1',
'5.2')
corrosionData = temp
corrosionData$viga = names[1]
View(corrosionData)
rm(corrosionData)
#Datos de medidas de corrosion en vigas
names = c('5.1',
'5.2')
temp = read_excel("G:/IETcc/2. Tesis/2. Resultados/SAG_Medidas corrosión.xlsx", sheet = 2, skip = 2)
temp = temp[,c(2:19)]
colnames(temp) = c('Fecha', 'tiempo',
'resist.A', 'Icor.A', 'Ecorr.A', 'rhom.A',
'resist.B', 'Icor.B', 'Ecorr.B', 'rhom.B',
'resist.C', 'Icor.C', 'Ecorr.C', 'rhom.C',
'resist', 'Icor', 'Ecorr', 'rhom')
corrosionData$viga = names[1]
corrosionData = temp
rm(list = ls())
#Datos de medidas de corrosion en vigas
names = c('5.1',
'5.2')
temp = read_excel("G:/IETcc/2. Tesis/2. Resultados/SAG_Medidas corrosión.xlsx", sheet = 2, skip = 2)
temp = temp[,c(2:19)]
colnames(temp) = c('Fecha', 'tiempo',
'resist.A', 'Icor.A', 'Ecorr.A', 'rhom.A',
'resist.B', 'Icor.B', 'Ecorr.B', 'rhom.B',
'resist.C', 'Icor.C', 'Ecorr.C', 'rhom.C',
'resist', 'Icor', 'Ecorr', 'rhom')
temp = cbind(viga = names[1], temp)
corrosionData = temp
View(corrosionData)
rm(list = ls())
#Datos de medidas de corrosion en vigas
names = c('5.1','5.2','5.3','5.4','5.5',
'6.1','6.2','6.3','6.4','6.5')
for (i in 1:10){
temp = read_excel("G:/IETcc/2. Tesis/2. Resultados/SAG_Medidas corrosión.xlsx", sheet = i, skip = 2)
temp = temp[,c(2:19)]
colnames(temp) = c('Fecha', 'tiempo',
'resist.A', 'Icor.A', 'Ecorr.A', 'rhom.A',
'resist.B', 'Icor.B', 'Ecorr.B', 'rhom.B',
'resist.C', 'Icor.C', 'Ecorr.C', 'rhom.C',
'resist', 'Icor', 'Ecorr', 'rhom')
temp = cbind(viga = names[i], temp)
corrosionData = temp
}
View(temp)
rm(list = ls())
#Datos de medidas de corrosion en vigas
names = c('5.1','5.2','5.3','5.4','5.5',
'6.1','6.2','6.3','6.4','6.5')
for (i in 2:11){
temp = read_excel("G:/IETcc/2. Tesis/2. Resultados/SAG_Medidas corrosión.xlsx", sheet = i, skip = 2)
temp = temp[,c(2:19)]
colnames(temp) = c('Fecha', 'tiempo',
'resist.A', 'Icor.A', 'Ecorr.A', 'rhom.A',
'resist.B', 'Icor.B', 'Ecorr.B', 'rhom.B',
'resist.C', 'Icor.C', 'Ecorr.C', 'rhom.C',
'resist', 'Icor', 'Ecorr', 'rhom')
temp = cbind(viga = names[i-1], temp)
corrosionData = temp
}
rm(list = ls())
#Datos de medidas de corrosion en vigas
names = c('5.1','5.2','5.3','5.4','5.5',
'6.1','6.2','6.3','6.4','6.5')
for (i in 2:11){
temp = read_excel("G:/IETcc/2. Tesis/2. Resultados/SAG_Medidas corrosión.xlsx", sheet = i, skip = 2)
temp = temp[,c(2:19)]
colnames(temp) = c('Fecha', 'tiempo',
'resist.A', 'Icor.A', 'Ecorr.A', 'rhom.A',
'resist.B', 'Icor.B', 'Ecorr.B', 'rhom.B',
'resist.C', 'Icor.C', 'Ecorr.C', 'rhom.C',
'resist', 'Icor', 'Ecorr', 'rhom')
temp = cbind(viga = names[i-1], temp)
if (i = 1){
corrosionData = temp
} else {
corrosionData = rbind(corrosionData, temp)
}
}
for (i in 2:11){
temp = read_excel("G:/IETcc/2. Tesis/2. Resultados/SAG_Medidas corrosión.xlsx", sheet = i, skip = 2)
temp = temp[,c(2:19)]
colnames(temp) = c('Fecha', 'tiempo',
'resist.A', 'Icor.A', 'Ecorr.A', 'rhom.A',
'resist.B', 'Icor.B', 'Ecorr.B', 'rhom.B',
'resist.C', 'Icor.C', 'Ecorr.C', 'rhom.C',
'resist', 'Icor', 'Ecorr', 'rhom')
temp = cbind(viga = names[i-1], temp)
if (i == 2){
corrosionData = temp
} else {
corrosionData = rbind(corrosionData, temp)
}
}
View(corrosionData)
class(corrosionData$viga)
str(corrosionData)
rm(list=ls())
setwd("G:/DOCUMENTOS/Edx_Analytics Edge/Unit 3_Logistic Regression/R")
songs = read.csv('songs.csv')
#Problem 1.1
table(songs$year)
#Problem 1.2
nrow(subset(songs,artistname=='Michael Jackson'))
#Problem 1.3
subset(songs,artistname=='Michael Jackson'&Top10==1)$songtitle
#Problem 1.4
table(as.factor(songs$timesignature))
#Problem 1.5
songs$songtitle[which.max(songs$tempo)]
#Problem 2.1
songsTrain = subset(songs,year<=2009)
songsTest = subset(songs,year=2010)
#Problem 2.2
nonvars = c("year", "songtitle", "artistname", "songID", "artistID")
songsTrain = songsTrain[ , !(names(songsTrain) %in% nonvars) ]
songsTest = songsTest[ , !(names(songsTest) %in% nonvars) ]
songsLog1 = glm(Top10 ~ ., data=songsTrain, family=binomial)
summary(songsLog1)
cor(songsTrain$loudness,songsTrain$energy)
songsLog2 = glm(Top10 ~ . - loudness, data=SongsTrain, family=binomial)
songsLog2 = glm(Top10 ~ . - loudness, data=songsTrain, family=binomial)
summary(songsLog2)
songsLog3 = glm(Top10 ~ . - energy, data=songsTrain, family=binomial)
summary(songsLog3)
pred3 = predict(songsLog3,type=response)
pred3 = predict(songsLog3,type='response')
table(songsTest$Top10,pred3>=0.45)
pred3 = predict(songsLog3,newdata=songsTest,type='response')
table(songsTest$Top10,pred3>=0.45)
(6262+267)/(6262+267+852+193)
songsTest = subset(songs,year==2010)
pred3 = predict(songsLog3,newdata=songsTest,type='response')
table(songsTest$Top10,pred3>=0.45)
(309+19)/(309+19+5+40)
table(songs$Top10)
table(songsTest$Top10)
314/(314+19)
314/(314+59)
table(songsTest$Top10,pred3>=0.45)
19/(40+19)#sensitivity
5/(309+5)
309/(309+5)#Specificity
source("G:/IETcc/2. Tesis/3. Análisis de resultados/Ensayos mecánicos/R/datasetCreate.R")
source("G:/IETcc/2. Tesis/3. Análisis de resultados/Ensayos mecánicos/R/funciones/funcionesELU.R")
source("G:/IETcc/2. Tesis/3. Análisis de resultados/Ensayos mecánicos/R/plotHipotesis.R")
#Inputs
h = 300
b = 150
r = 40
as = 280
fck = 43.65
pret = 1408*0.75
fyk = 1860
n = 2
phi = 13.35 #15.24
presion = 0
tiempo = 10
alfa = 10
df = dataset()
df$adh.res.rot = adh_res(df$IcorrRep, tiempo, presion)
#HIPÓTESIS 0: sin daño
h0.vu = vu2(h, b, r, as, fck, gammaC = 1, alfa = 0.5, pret)
h0.mu = mu(h, b, r, as, fck, gammaC = 1, fyk, gammaS = 1)
h0.adh_est = adh_est(h, b, r, n, phi, h0.vu)
#HIPÓTESIS 1: pérdida de sección en el acero
px = 0.0115*df$IcorrRep*tiempo
phi.daño = phi - alfa*px
as.daño = pi*phi.daño^2/4
df$vu.h1 = vu2(h, b, r, as.daño, fck, gammaC = 1, alfa = 0.5, pret)
df$mu.h1 = mu(h, b, r, as.daño, fck, gammaC = 1, fyk, gammaS = 1)
df$adh_est.h1 = adh_est(h, b, r, n, phi.daño, df$v.rotura)
#HIPÓTESIS 2: delaminación del recubrimiento superior
h.daño = h - r
df$vu.h2 = vu2(h.daño, b, r, as.daño, fck, gammaC = 1, alfa = 0.5, pret)
df$mu.h2 = mu(h.daño, b, r, as.daño, fck, gammaC = 1, fyk, gammaS = 1)
df$adh_est.h2 = adh_est(h.daño, b, r, n, phi.daño, df$v.rotura)
#HIPÓTESIS 3: delaminación del recubrimiento inferior
r.daño = 0
df$vu.h3 = vu2(h, b, r.daño, as.daño, fck, gammaC = 1, alfa = 0.5, pret)
df$mu.h3 = mu(h, b, r.daño, as.daño, fck, gammaC = 1, fyk, gammaS = 1)
df$adh_est.h3 = adh_est(h, b, r.daño, n, phi.daño, df$v.rotura)
#HIPÓTESIS 4: delaminación del recubrimiento superior e inferior
df$vu.h4 = vu2(h.daño, b, r.daño, as.daño, fck, gammaC = 1, alfa = 0.5, pret)
df$mu.h4 = mu(h.daño, b, r.daño, as.daño, fck, gammaC = 1, fyk, gammaS = 1)
df$adh_est.h4 = adh_est(h.daño, b, r.daño, n, phi.daño, df$v.rotura)
#Hipotesis por tipo de fallo (momento, cortante, adherencia)
library(reshape2)
df.hip = df[,c(1, 8, 9, 11:23)]
df.hip = melt(df.hip, id.vars = c("viga"))
df.hip.mom = df.hip[substring(as.character(df.hip$variable),1,1)=='m',]
df.hip.cor = df.hip[substring(as.character(df.hip$variable),1,1)=='v',]
df.hip.adh = df.hip[substring(as.character(df.hip$variable),1,1)=='a',]
#Outputs: graficas
#Momento
jpeg(filename = paste('G:/IETcc/2. Tesis/3. Análisis de resultados/Ensayos mecánicos/R/graphics/',
'plotMomento_',tiempo,'años','.jpg',sep=''), width = 800, height = 600)
momento.hipotesis(df.hip.mom)
dev.off()
#Cortante
jpeg(filename = paste('G:/IETcc/2. Tesis/3. Análisis de resultados/Ensayos mecánicos/R/graphics/',
'plotCortante_',tiempo,'años','.jpg',sep=''), width = 800, height = 600)
cortante.hipotesis(df.hip.cor)
dev.off()
#Adherencia
jpeg(filename = paste('G:/IETcc/2. Tesis/3. Análisis de resultados/Ensayos mecánicos/R/graphics/',
'plotAdherencia_',tiempo,'años','.jpg',sep=''), width = 800, height = 600)
adherencia.hipotesis(df.hip.adh)
dev.off()
View(df)
mean(df$luz)
mean(df$luz[-c(7,10,11,12)])
table(songsTest$Top10,pred3>=0.45)
getwd()
parole = read.csv('parole.csv')
View(parole)
table(parole$violator)
str(parole)
help("read.csv")
as.factor(parole[c(1,2,4,6,7,8,9)])
as.factor(parole[1])
as.factor(parole[,1])
as.factor(parole[c(1,2,4,6,7,8,9)])
as.factor(parole[,c(1,2,4,6,7,8,9)])
help(apply)
cols = c(1,2,4,6,7,8,9)
parole[cols] = lapply(parole[cols], factor)
str(parole)
str(parole)
cols = c(1,2,4,7,8,9)
parole[cols] = lapply(parole[cols], factor)
str(parole)
setwd("G:/DOCUMENTOS/Edx_Analytics Edge/Unit 3_Logistic Regression/R")
parole = read.csv('parole.csv')
#Problem 1.1 & 1.2
table(parole$violator)
#Problem 2.1
str(parole)
cols = c(1,2,4,7,8,9)
parole[cols] = lapply(parole[cols], factor)
str(parole)
summary(parole)
str(parole$male)
table(parole$male)
set.seed(144)
library(caTools)
split = sample.split(parole$violator, SplitRatio = 0.7)
train = subset(parole, split == TRUE)
test = subset(parole, split == FALSE)
table(train$violator,test$violator)
table(train$violator)
table(test$violator)
418/675
179/675
mod1 = glm(violator~.,data=train,family=binomial)
summary(mod1)
mod1$coefficients
setwd("G:/DOCUMENTOS/Edx_Analytics Edge/Unit 3_Logistic Regression/R")
parole = read.csv('parole.csv')
#Problem 1.1 & 1.2
table(parole$violator)
#Problem 2.1
cols = c(1,2,4,7,8,9)
#parole[cols] = lapply(parole[cols], factor)
str(parole)
#Problem 2.2
summary(parole)
table(parole$male)
#Problem 3.1 & 3.2
set.seed(144)
library(caTools)
split = sample.split(parole$violator, SplitRatio = 0.7)
train = subset(parole, split == TRUE)
test = subset(parole, split == FALSE)
#Problem 4.1 & 4.2
mod1 = glm(violator~.,data=train,family=binomial)
summary(mod1)
#Problem 4.3
mod1$coefficients
setwd("G:/DOCUMENTOS/Edx_Analytics Edge/Unit 3_Logistic Regression/R")
parole = read.csv('parole.csv')
#Problem 1.1 & 1.2
table(parole$violator)
#Problem 2.1
cols = c(1,2,4,7,8,9)
parole[cols] = lapply(parole[cols], factor)
str(parole)
#Problem 2.2
summary(parole)
table(parole$male)
#Problem 3.1 & 3.2
set.seed(144)
library(caTools)
split = sample.split(parole$violator, SplitRatio = 0.7)
train = subset(parole, split == TRUE)
test = subset(parole, split == FALSE)
#Problem 4.1 & 4.2
mod1 = glm(violator~.,data=train,family=binomial)
summary(mod1)
#Problem 4.3
mod1$coefficients
mod1$coefficients*c(1,1,1,50,1,3,12,0,2)
mod1$coefficients*c(1,1,1,50,0,0,0,3,12,0,0,1,0,0)
sum(mod1$coefficients*c(1,1,1,50,0,0,0,3,12,0,0,1,0,0))
sum(mod1$coefficients)
summary(mod1)
sum(mod1$coefficients*c(1,1,1,50,0,0,0,3,12,0,1,0,0))
sum(mod1$coefficients*c(1,0,1,50,0,0,0,3,12,0,1,0,0))
sum(mod1$coefficients*c(1,1,0,50,0,0,0,3,12,0,1,0,0))
exp(sum(mod1$coefficients*c(1,1,0,50,0,0,0,3,12,0,1,0,0)))
1/(1+exp^(-sum(mod1$coefficients*c(1,1,0,50,0,0,0,3,12,0,1,0,0)))) #prob
2^3
sum(mod1$coefficients*c(1,1,0,50,0,0,0,3,12,0,1,0,0))
1/(1+exp^(-(sum(mod1$coefficients*c(1,1,0,50,0,0,0,3,12,0,1,0,0))))) #prob
1/(1+exp^((sum(mod1$coefficients*c(1,1,0,50,0,0,0,3,12,0,1,0,0))))*-1) #prob
1/(1+exp^((sum(mod1$coefficients*c(1,1,0,50,0,0,0,3,12,0,1,0,0))))) #prob
1/(1+exp((sum(mod1$coefficients*c(1,1,0,50,0,0,0,3,12,0,1,0,0))))) #prob
1/(1+exp(-(sum(mod1$coefficients*c(1,1,0,50,0,0,0,3,12,0,1,0,0))))) #prob
pred = predict(mod1,newdata=test,type='response')
max(pred)
table(test$violator,pred>=0.5)
(12)/(11+12)#sensitivity
167/(167+12)#specificity
(167+12)/(167+12+11+12)#Accuracy
table(test$violator)
table(songsTest$Top10)
179/(179+23)
table(test$violator,pred>=0.9)
table(test$violator,pred>=0.7)
table(test$violator,pred>=0.3)
table(test$violator,pred>=0.5)
table(test$violator,pred>=0.05)
table(test$violator,pred>=0.1)
library(ROCR)
ROCRpred = prediction(pred, test$violator)
as.numeric(performance(ROCRpred, "auc")@y.values)
plot(ROCRperf)
ROCRperf = performance(ROCRpred, "tpr", "fpr")
plot(ROCRperf)
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.25), text.adj=c(-0.2,1.7))
